View(k)
View(k)
View(activity_labels)
View(activity_labels)
changeLabel<- function(data,label) {
for(i in label) {
data[grep(i,data)] <- list(i)
}
}
View(y)
View(y)
changeLabel(y,activity_labels)
changeLabel<- function(data,label) {
for(i in label) {
data[grep(i,data)] <- i
}
}
changeLabel(y,activity_labels)
changeLabel<- function(data,label) {
for(i in label) {
pos <- grep(i,data)
for(k in pos) {
data[k] <- i
}
}
}
changeLabel(y,activity_labels)
for(i in label) {
pos <- grep(i,data)
}}
changeLabel(y,activity_labels$V2)
View(y)
View(y)
changeLabel<- function(data,label) {
for(i in label) {
pos <- grep(i,data)
for(k in pos) {
data[k] <- i
}
}
data
}
ok <- changeLabel(y,activity_labels$V2)
View(ok)
View(ok)
merda <- c("cane"l)
merda <- c("cane","cavallo","pecora")
?sub
merda <- ("cavallo","vaffanculo",merda)
?merge
trainy <- read.table(paste(path,"train/y_train.txt",sep=""))
testy <- read.table(paste(path,"test/y_test.txt",sep=""))
y <- rbind(trainy,testy)
sorted <- merge(x=y,y=activity_labels,by.x="V1",by.y="V1")
View(sorted)
View(sorted)
notsorted <- merge(x=y,y=activity_labels,by.x="V1",by.y="V1",sort=FALSE)
View(notsorted)
View(notsorted)
##call as
# data <- run_analysis(paste(getwd(),"/UCI HAR Dataset/",sep=""))
run_analysis <- function(path) {
#leggo label e titoli
activity_labels <-read.table(paste(path,"/activity_labels.txt",sep=""))
titles <- read.table(paste(path,"/features.txt",sep=""))
#leggo le x
trainx <- read.table(paste(path,"train/X_train.txt",sep=""))
testx <- read.table(paste(path,"test/X_test.txt",sep=""))
x <- rbind(trainx,testx)
names(x) <- titles$V2
eraseCol <- grep("mean()|std()",names(x),invert=TRUE)
x[eraseCol] <- list(NULL)
#leggo le y e sostituisco con labels labels
trainy <- read.table(paste(path,"train/y_train.txt",sep=""))
testy <- read.table(paste(path,"test/y_test.txt",sep=""))
y <- rbind(trainy,testy)
y <- merge(x=y,y=activity_labels,by.x="V1",by.y="V1") #non fa bene il merge <- porcoo#######
names(y)[2] <- "Labels"
#unisco y a x
data <- cbind(y[2],x)
data
}
data <- run_analysis("/Users/mickfenneck/getcleandata/UCI HAR Dataset/")
View(data)
View(data)
?read.table
path <- "/Users/mickfenneck/getcleandata/UCI HAR Dataset/"
trainy <- read.table(paste(path,"train/y_train.txt",sep=""))
testy <- read.table(paste(path,"test/y_test.txt",sep=""))
y <- rbind(trainy,testy)
View(y)
View(y)
?apply()
y$V1
y$V1 <- as.character(y$V1)
str(y)
y$V1 <- as.factor(y$V1)
str(y)
levels(y$V1)
activity_labels <-read.table(paste(path,"/activity_labels.txt",sep=""))
View(activity_labels)
View(activity_labels)
levels(y$V1) <- activity_labels$V2
levels(y$V1)
View(y)
View(y)
str(y)
trainy <- read.table(paste(path,"train/y_train.txt",sep=""))
testy <- read.table(paste(path,"test/y_test.txt",sep=""))
y <- rbind(trainy,testy)[1]
str(y)
y
##call as
# data <- run_analysis(paste(getwd(),"/UCI HAR Dataset/",sep=""))
run_analysis <- function(path) {
#leggo label e titoli
activity_labels <-read.table(paste(path,"/activity_labels.txt",sep=""))
titles <- read.table(paste(path,"/features.txt",sep=""))
#leggo le x
trainx <- read.table(paste(path,"train/X_train.txt",sep=""))
testx <- read.table(paste(path,"test/X_test.txt",sep=""))
x <- rbind(trainx,testx)
names(x) <- titles$V2
eraseCol <- grep("mean()|std()",names(x),invert=TRUE)
x[eraseCol] <- list(NULL)
#leggo le y e sostituisco con labels labels
trainy <- read.table(paste(path,"train/y_train.txt",sep=""))
testy <- read.table(paste(path,"test/y_test.txt",sep=""))
y <- rbind(trainy,testy)
#converto la colonna a factor per modificare i levels
y$V1 <- as.factor(y$V1)
levels(y$V1) <- activity_labels$V2
names(y)[2] <- "Labels"
#unisco y a x
data <- cbind(y[2],x)
data
}
path <- "/Users/mickfenneck/getcleandata/UCI HAR Dataset/"
data <- run_analysis(path)
activity_labels <-read.table(paste(path,"/activity_labels.txt",sep=""))
trainy <- read.table(paste(path,"train/y_train.txt",sep=""))
testy <- read.table(paste(path,"test/y_test.txt",sep=""))
y <- rbind(trainy,testy)
#converto la colonna a factor per modificare i levels
y$V1 <- as.factor(y$V1)
levels(y$V1) <- activity_labels$V2
View(y)
View(y)
path <- "/Users/mickfenneck/getcleandata/UCI HAR Dataset/"
data <- run_analysis(path)
##call as
# data <- run_analysis(paste(getwd(),"/UCI HAR Dataset/",sep=""))
run_analysis <- function(path) {
#leggo label e titoli
activity_labels <-read.table(paste(path,"/activity_labels.txt",sep=""))
titles <- read.table(paste(path,"/features.txt",sep=""))
#leggo le x
trainx <- read.table(paste(path,"train/X_train.txt",sep=""))
testx <- read.table(paste(path,"test/X_test.txt",sep=""))
x <- rbind(trainx,testx)
names(x) <- titles$V2
eraseCol <- grep("mean()|std()",names(x),invert=TRUE)
x[eraseCol] <- list(NULL)
#leggo le y e sostituisco con labels labels
trainy <- read.table(paste(path,"train/y_train.txt",sep=""))
testy <- read.table(paste(path,"test/y_test.txt",sep=""))
y <- rbind(trainy,testy)
#converto la colonna a factor per modificare i levels
y$V1 <- as.factor(y$V1)
levels(y$V1) <- activity_labels$V2
names(y)[1] <- "Labels"
#unisco y a x
data <- cbind(y[2],x)
data
}
data <- run_analysis(path)
path <- "/Users/mickfenneck/getcleandata/UCI HAR Dataset/"
##call as
# data <- run_analysis(paste(getwd(),"/UCI HAR Dataset/",sep=""))
run_analysis <- function(path) {
#leggo label e titoli
activity_labels <-read.table(paste(path,"/activity_labels.txt",sep=""))
titles <- read.table(paste(path,"/features.txt",sep=""))
#leggo le x
trainx <- read.table(paste(path,"train/X_train.txt",sep=""))
testx <- read.table(paste(path,"test/X_test.txt",sep=""))
x <- rbind(trainx,testx)
names(x) <- titles$V2
eraseCol <- grep("mean()|std()",names(x),invert=TRUE)
x[eraseCol] <- list(NULL)
#leggo le y e sostituisco con labels labels
trainy <- read.table(paste(path,"train/y_train.txt",sep=""))
testy <- read.table(paste(path,"test/y_test.txt",sep=""))
y <- rbind(trainy,testy)
#converto la colonna a factor per modificare i levels
y$V1 <- as.factor(y$V1)
levels(y$V1) <- activity_labels$V2
names(y)[1] <- "Labels"
#unisco y a x
data <- cbind(y[1],x)
data
}
data <- run_analysis(path)
View(data)
View(data)
##call as
# data <- run_analysis(paste(getwd(),"/UCI HAR Dataset/",sep=""))
run_analysis <- function(path) {
#leggo label e titoli
activity_labels <-read.table(paste(path,"/activity_labels.txt",sep=""))
titles <- read.table(paste(path,"/features.txt",sep=""))
#leggo le x
trainx <- read.table(paste(path,"train/X_train.txt",sep=""))
testx <- read.table(paste(path,"test/X_test.txt",sep=""))
x <- rbind(trainx,testx)
names(x) <- titles$V2
eraseCol <- grep("mean()|std()",names(x),invert=TRUE)
x[eraseCol] <- list(NULL)
#leggo le y e sostituisco con labels labels
trainy <- read.table(paste(path,"train/y_train.txt",sep=""))
testy <- read.table(paste(path,"test/y_test.txt",sep=""))
y <- rbind(trainy,testy)
#converto la colonna a factor per modificare i levels
y$V1 <- as.factor(y$V1)
levels(y$V1) <- activity_labels$V2
names(y)[1] <- "Labels"
#unisco y a x
data <- cbind(y[1],x)
data
}
path <- "/Users/mickfenneck/getcleandata/UCI HAR Dataset/"
data <- run_analysis(path)
View(data)
View(data)
##call as
# data <- run_analysis(paste(getwd(),"/UCI HAR Dataset/",sep=""))
run_analysis <- function(path) {
#leggo label e titoli
activity_labels <-read.table(paste(path,"/activity_labels.txt",sep=""))
titles <- read.table(paste(path,"/features.txt",sep=""))
#leggo le x
trainx <- read.table(paste(path,"train/X_train.txt",sep=""))
testx <- read.table(paste(path,"test/X_test.txt",sep=""))
x <- rbind(trainx,testx)
names(x) <- titles$V2
eraseCol <- grep("mean()|std()",names(x),invert=TRUE)
x[eraseCol] <- list(NULL)
#leggo le y e sostituisco con labels labels
trainy <- read.table(paste(path,"train/y_train.txt",sep=""))
testy <- read.table(paste(path,"test/y_test.txt",sep=""))
y <- rbind(trainy,testy)
#converto la colonna a factor per modificare i levels
y$V1 <- as.factor(y$V1)
levels(y$V1) <- activity_labels$V2
names(y)[1] <- "Labels"
#unisco y a x
data <- cbind(y[1],x)
data
}
path <- "/Users/mickfenneck/getcleandata/UCI HAR Dataset/"
data <- run_analysis(path)
path <- "/Users/mi"
path <- "/Users/mickfenneck/getcleandata/UCI HAR Dataset/"
##call as
# data <- run_analysis(paste(getwd(),"/UCI HAR Dataset/",sep=""))
run_analysis <- function(path) {
#leggo label e titoli
activity_labels <-read.table(paste(path,"/activity_labels.txt",sep=""))
titles <- read.table(paste(path,"/features.txt",sep=""))
#leggo le x
trainx <- read.table(paste(path,"train/X_train.txt",sep=""))
testx <- read.table(paste(path,"test/X_test.txt",sep=""))
x <- rbind(trainx,testx)
names(x) <- titles$V2
eraseCol <- grep("mean()|std()",names(x),invert=TRUE)
x[eraseCol] <- list(NULL)
#leggo le y e sostituisco con labels labels
trainy <- read.table(paste(path,"train/y_train.txt",sep=""))
testy <- read.table(paste(path,"test/y_test.txt",sep=""))
y <- rbind(trainy,testy)
#converto la colonna a factor per modificare i levels
y$V1 <- as.factor(y$V1)
levels(y$V1) <- activity_labels$V2
names(y)[1] <- "Activity"
#leggo subject
trainSub <- read.table(paste(path,"train/subject_train.txt",sep=""))
testSub <- read.table(paste(path,"test/subject_test.txt",sep=""))
k <- rbind(trainSub,testSub)
names(k)[1] <- "Subject"
#unisco y a x
data <- data.table(cbind(y[1],k,x))
tidyData <- data[,lapply(.SD, mean), by="Activity,Subject"]
write.table(tidyData, "tidyData.txt")
tidyData
}
data <- run_analysis(path)
library(data.table)
data <- run_analysis(path)
View(data)
str(data)
source('~/Desktop/Programming Assignments/Week 4/rankhospital.R')
library(ggplot2)
?qplot
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
The first thing to do is to import the library that we'll need in this analysis.
```{r}
library(ggplot2)
```
We can now start to open the csv file, convert it to a data.frame and preprocess the data in order to have a tidy and useful dataset.
```{r}
#open the dataset
table <- read.csv("./activity.csv")
#convertions
table$date <- as.Date(table$date)
table$steps <- as.numeric(as.character(table$steps))
table$interval <- as.numeric(as.character(table$interval))
head(table)
#preprocessing
steps_date <- aggregate(steps ~ date, data=table, FUN=sum)
```
We now have a tidy and simple dataset to analize:
```{r}
str(steps_date)
head(steps_date)
```
## What is mean total number of steps taken per day?
We can now create a histogram that plot the steps per day.
```{r}
barplot(steps_date$steps, names.arg = steps_date$date, xlab = "Date", ylab = "Steps")
```
We can proceed calculating the mean of the steps:
```{r}
steps_mean <- mean(steps_date$steps)
steps_mean
```
And the median of the steps:
```{r}
steps_median <- median(steps_date$steps)
steps_median
```
## What is the average daily table pattern?
Now let's make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
steps_data <- aggregate(steps ~ interval, data = table, FUN = mean)
plot(steps_data, type = "l", xlab = "Interval", ylab = "Steps")
```
Which 5-minute interval, on average across all the days in the dataset,
contains the maximum number of steps?
```{r}
steps_data$interval[which.max(steps_data$steps)]
```
## Imputing missing values
Note that there are a number of days/intervals where there are missing values (coded as NA). The presence of missing days may introduce bias into some calculations or summaries of the data.
Calculate and report the total number of missing values in the dataset
```{r}
sum(is.na(table))
```
Devise a strategy for filling in all of the missing values in the dataset.
The strategy does not need to be sophisticated. For example, you could use
the mean/median for that day, or the mean for that 5-minute interval, etc.
I will use the means for the 5-minute intervals as fillers for missing
values.
Create a new dataset that is equal to the original dataset but with
the missing data filled in.
```{r}
table <- merge(table, steps_data, by = "interval", suffixes = c("",".y"))
na <- is.na(table$steps)
table$steps[na] <- table$steps.y[na]
table <- table[,c(1:3)]
```
Make a histogram of the total number of steps taken each day and Calculate
and report the **mean** and **median** total number of steps taken per day.
Do these values differ from the estimates from the first part of the assignment?
What is the impact of imputing missing data on the estimates of the total
daily number of steps?
```{r}
steps_date <- aggregate(steps ~ date, data=table, FUN=sum)
barplot(steps_date$steps, names.arg=steps_date$date, xlab="Date", ylab="Steps")
mean(steps_date$steps)
median(steps_date$steps)
```
## Are there differences in table patterns between weekdays and weekends?
Create a new factor variable in the dataset with two levels -- "weekday" and
"weekend" indicating whether a given date is a weekday or weekend day.
```{r, cache=TRUE}
Sys.setlocale("LC_TIME", "en_US")
dayOfWeek <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {
"weekend"
} else {
"weekday"
}
}
table$dayOfWeek <- as.factor(sapply(table$date, dayOfWeek))
head(table)
```
Make a panel plot containing a time series plot of the 5-minute interval (x-axis)
and the average number of steps taken, averaged across all weekday days or
weekend days (y-axis).
```{r}
par(mfrow=c(2,1))
steps_type <- aggregate(steps ~ interval, data = table,
subset = table$dayOfWeek == "weekend", FUN = mean)
plot(steps_type, main = "weekend", type = "l", xlab = "Interval", ylab = "Steps")
steps_type <- aggregate(steps ~ interval, data = table,
subset = table$dayOfWeek == "weekday", FUN = mean)
plot(steps_type, main = "weekday", type = "l", xlab = "Interval", ylab = "Steps")
```
setwd("/Users/mickfenneck/Desktop/RepData_PeerAssessment1/")
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
We can start to open the csv file, convert it to a data.frame and preprocess the data in order to have a tidy and useful dataset.
```{r}
#open the dataset
table <- read.csv("./activity.csv")
#convertions
table$date <- as.Date(table$date)
table$steps <- as.numeric(as.character(table$steps))
table$interval <- as.numeric(as.character(table$interval))
head(table)
#preprocessing
steps_date <- aggregate(steps ~ date, data=table, FUN=sum)
```
We now have a tidy and simple dataset to analize:
```{r}
str(steps_date)
head(steps_date)
```
## What is mean total number of steps taken per day?
We can now create a histogram that plot the steps per day.
```{r}
barplot(steps_date$steps, names.arg = steps_date$date, xlab = "Date", ylab = "Steps")
```
We can proceed calculating the mean of the steps:
```{r}
steps_mean <- mean(steps_date$steps)
steps_mean
```
And the median of the steps:
```{r}
steps_median <- median(steps_date$steps)
steps_median
```
## What is the average daily table pattern?
Now let's make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
steps_data <- aggregate(steps ~ interval, data = table, FUN = mean)
plot(steps_data, type = "l", xlab = "Interval", ylab = "Steps")
```
Which 5-minute interval, on average across all the days in the dataset,
contains the maximum number of steps?
```{r}
steps_data$interval[which.max(steps_data$steps)]
```
## Imputing missing values
Note that there are a number of days/intervals where there are missing values (coded as NA). The presence of missing days may introduce bias into some calculations or summaries of the data.
Calculate and report the total number of missing values in the dataset
```{r}
sum(is.na(table))
```
Devise a strategy for filling in all of the missing values in the dataset.
The strategy does not need to be sophisticated. For example, you could use
the mean/median for that day, or the mean for that 5-minute interval, etc.
I will use the means for the 5-minute intervals as fillers for missing
values.
Create a new dataset that is equal to the original dataset but with
the missing data filled in.
```{r}
table <- merge(table, steps_data, by = "interval", suffixes = c("",".y"))
na <- is.na(table$steps)
table$steps[na] <- table$steps.y[na]
table <- table[,c(1:3)]
```
Make a histogram of the total number of steps taken each day and Calculate
and report the **mean** and **median** total number of steps taken per day.
Do these values differ from the estimates from the first part of the assignment?
What is the impact of imputing missing data on the estimates of the total
daily number of steps?
```{r}
steps_date <- aggregate(steps ~ date, data=table, FUN=sum)
barplot(steps_date$steps, names.arg=steps_date$date, xlab="Date", ylab="Steps")
mean(steps_date$steps)
median(steps_date$steps)
```
## Are there differences in table patterns between weekdays and weekends?
Create a new factor variable in the dataset with two levels -- "weekday" and
"weekend" indicating whether a given date is a weekday or weekend day.
```{r, cache=TRUE}
Sys.setlocale("LC_TIME", "en_US")
dayOfWeek <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {
"weekend"
} else {
"weekday"
}
}
table$dayOfWeek <- as.factor(sapply(table$date, dayOfWeek))
head(table)
```
Make a panel plot containing a time series plot of the 5-minute interval (x-axis)
and the average number of steps taken, averaged across all weekday days or
weekend days (y-axis).
```{r}
par(mfrow=c(2,1))
steps_type <- aggregate(steps ~ interval, data = table,
subset = table$dayOfWeek == "weekend", FUN = mean)
plot(steps_type, main = "weekend", type = "l", xlab = "Interval", ylab = "Steps")
steps_type <- aggregate(steps ~ interval, data = table,
subset = table$dayOfWeek == "weekday", FUN = mean)
plot(steps_type, main = "weekday", type = "l", xlab = "Interval", ylab = "Steps")
```
